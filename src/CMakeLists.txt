cmake_minimum_required(VERSION 2.8)

project(gearshifft CXX)

list(APPEND CMAKE_MODULE_PATH "../cmake")

set(CMAKE_CXX_STANDARD 14)

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5.0
        OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 5.0))
    message(FATAL_ERROR "${PROJECT_NAME} requires g++ 5.0 or greater.")
  endif()
  set(CMAKE_CXX_FLAGS "--std=gnu++14" ${CMAKE_CXX_FLAGS})
  #gcc4.8+ uses dwarf-4. If you have gdb <7.5 then use this line
  #set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -gdwarf-2")
  #gdb 7.0-7.5 may require
  #set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fvar-tracking-assignments")
endif()

find_package(Boost 1.56 QUIET COMPONENTS unit_test_framework program_options REQUIRED)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIRS})
endif()

set(DEV_TESTS "" CACHE STRING "Tests for developing (No Benchmarks)")
if(DEV_TESTS)
  message(">> Test mode")
  add_definitions(-DDEV_TESTS)
  set(TESTS tests.cpp)
endif()

#------------------------------------------------------------------------------
# CUDA+CUFFT
#------------------------------------------------------------------------------
find_package(CUDA)
if(CUDA_FOUND)
  include(FindCUDA)
  include_directories(${CUDA_INCLUDE_DIRS})
  list(APPEND FFTLIBS "cufft")
  message(">> cuFFT -> " ${CUDA_CUFFT_LIBRARIES})
else()
  message("cuFFT benchmark disabled.")
endif()

#------------------------------------------------------------------------------
# OPENCL+CLFFT
#------------------------------------------------------------------------------
find_package(OpenCL)
if(OPENCL_FOUND)
  find_package(clFFT)
  if(CLFFT_FOUND)
    include_directories(${CLFFT_INCLUDE_DIRS})
    list(APPEND FFTLIBS "clfft")
    message(">> clFFT -> " ${CLFFT_LIBRARIES})
  endif()
endif()

if(NOT CLFFT_FOUND)
  message("clFFT benchmark disabled.")
endif()

#------------------------------------------------------------------------------
# ROCM+HCFFT
#------------------------------------------------------------------------------
find_package(hcFFT)
if(HCFFT_FOUND)
  include_directories(${HCFFT_INCLUDE_DIRS})
  list(APPEND FFTLIBS "hcfft")
  message(">> hcFFT -> " ${HCFFT_LIBRARIES} " " ${HCFFT_INCLUDE_DIRS})
  message(">> Warning: no runner for hcfft implemented yet")
endif()

if(NOT HCFFT_FOUND)
  message("hcFFT benchmark disabled.")
endif()

if(NOT (CLFFT_FOUND OR CUDA_FOUND OR HCFFT_FOUND))
  message(FATAL_ERROR "-> No FFT library for benchmark found !!!")
endif()

#------------------------------------------------------------------------------
# LiFFT
#------------------------------------------------------------------------------
function(add_exec_lifft Tlib)
  set(PROJECT_EXEC gearshifft_lifft_${Tlib})
  add_executable(${PROJECT_EXEC} ${SOURCES})
  if (Tlib STREQUAL "cufft")
    target_compile_definitions(${PROJECT_EXEC} PUBLIC -DCUDA_ENABLED -DLiFFT_ENABLED)
    set(LIBS ${CUDA_LIBRARIES} ${CUDA_CUFFT_LIBRARIES})
#  elseif(Tlib STREQUAL "clfft")
#    target_compile_definitions(${PROJECT_EXEC} PUBLIC -DOPENCL_ENABLED -DLiFFT_ENABLED)
#    set(LIBS ${CLFFT_LIBRARIES} ${OPENCL_LIBRARIES})
  endif()
  # todo: fftw
  target_link_libraries(${PROJECT_EXEC} ${Boost_LIBRARIES} ${LIBS})
  add_test(NAME ${PROJECT_EXEC} COMMAND ${PROJECT_EXEC})
endfunction()

#------------------------------------------------------------------------------
# Helper function to add specific FFT library benchmark
#------------------------------------------------------------------------------
function(add_exec Tlib)
  message(">> Target: ${Tlib}")
  set(PROJECT_EXEC gearshifft_${Tlib})
  add_executable(${PROJECT_EXEC} ${SOURCES})
  if (Tlib STREQUAL "cufft" OR DEV_TESTS STREQUAL "cufft")
    target_compile_definitions(${PROJECT_EXEC} PUBLIC -DCUDA_ENABLED)
    set(LIBS ${CUDA_LIBRARIES} ${CUDA_CUFFT_LIBRARIES})
  elseif(Tlib STREQUAL "clfft" OR DEV_TESTS STREQUAL "clfft")
    target_compile_definitions(${PROJECT_EXEC} PUBLIC -DOPENCL_ENABLED)
    set(LIBS ${CLFFT_LIBRARIES} ${OPENCL_LIBRARIES})
  endif()
  target_link_libraries(${PROJECT_EXEC} ${Boost_LIBRARIES} ${LIBS})
  add_test(NAME ${PROJECT_EXEC} COMMAND ${PROJECT_EXEC})
endfunction()

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
include_directories(../inc)

enable_testing()
add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND} --verbose)

if(DEV_TESTS)
  set(SOURCES ${TESTS})
  add_exec("test")
else()
  set(SOURCES benchmark.cpp options.cpp)
  foreach(FFTLIB ${FFTLIBS})
    add_exec(${FFTLIB})
    add_exec_lifft(${FFTLIB})
  endforeach()
endif()
